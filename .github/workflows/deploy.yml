name: 🚀 Deploy Greenscape

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

concurrency:
  group: deploy-greenscape
  cancel-in-progress: false

env:
  APP_NAME: ${{ secrets.APP_NAME || 'greenscape' }}
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID || 'vernal-seeker-472512-i5' }}
  REGION: ${{ secrets.AR_REGION || 'us-central1' }}
  REPOSITORY: ${{ secrets.AR_REPO_NAME || 'greenscape' }}

jobs:
  deploy:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Auth to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: ☁️ Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: 🐳 Configure Docker
      run: |
        echo "🐳 Configuring Docker for Artifact Registry..."
        DOCKER_REGION="${{ env.REGION }}"
        if [ -z "$DOCKER_REGION" ]; then
          DOCKER_REGION="us-central1"
        fi
        echo "Docker registry: $DOCKER_REGION-docker.pkg.dev"
        gcloud auth configure-docker $DOCKER_REGION-docker.pkg.dev --quiet
        echo "DOCKER_REGION=$DOCKER_REGION" >> $GITHUB_ENV

    - name: 📦 Fetch Environment Variables
      run: |
        echo "📦 Fetching environment from Secret Manager..."
        echo "Project: ${{ env.PROJECT_ID }}"
        echo "Secret: greenscape"

        gcloud secrets versions access latest \
          --secret="greenscape" \
          --project="${{ env.PROJECT_ID }}" > .env.production

        echo "✅ Environment variables fetched from Secret Manager"
        echo "📊 File size: $(wc -c < .env.production) bytes"
        echo "📊 Line count: $(wc -l < .env.production) lines"
        echo "🔍 First 10 variable names:"
        head -10 .env.production | cut -d'=' -f1
        echo "🔍 Looking for VITE_SITE_TITLE:"
        grep "VITE_SITE_TITLE" .env.production || echo "❌ VITE_SITE_TITLE not found!"

    - name: 🏗️ Build & Push Docker Image
      run: |
        APP_NAME_LOWER=$(echo "${{ env.APP_NAME }}" | tr '[:upper:]' '[:lower:]')
        IMAGE_PATH="${{ env.DOCKER_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/$APP_NAME_LOWER"

        echo "🏗️ Building Docker image: $IMAGE_PATH"

        # Copy .env.production to .env for the build context
        cp .env.production .env

        echo "🔍 COMPREHENSIVE .env VERIFICATION FOR DOCKER BUILD:"
        echo "📊 .env size: $(wc -c < .env) bytes"
        echo "📊 .env lines: $(wc -l < .env) lines"
        echo "🔍 First 10 variables in .env:"
        head -10 .env
        echo "🔍 VITE_SITE_TITLE check:"
        grep "VITE_SITE_TITLE" .env || echo "❌ VITE_SITE_TITLE missing in .env!"
        echo "🔍 All VITE_ variables (first 10):"
        grep "^VITE_" .env | head -10
        echo "🔍 Total VITE_ variables count:"
        grep "^VITE_" .env | wc -l | xargs -I {} echo "Found {} VITE_ variables"

        echo "🔍 .env file permissions:"
        ls -la .env
        echo "🔍 Current working directory:"
        pwd
        echo "🔍 All files in current directory:"
        ls -la

        echo "🐳 Starting Docker build with .env file..."
        echo "🔍 Docker build context verification:"
        echo "🔍 Files being copied to Docker context:"
        find . -name ".env*" -type f -exec ls -la {} \;

        docker build \
          --no-cache \
          --pull \
          --build-arg NODE_ENV=production \
          --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
          --build-arg BUILD_SHA=${{ github.sha }} \
          --progress=plain \
          -t $IMAGE_PATH:${{ github.sha }} \
          -t $IMAGE_PATH:latest \
          .

        echo "🔍 POST-BUILD VERIFICATION:"
        echo "🔍 Testing built image environment variables..."
        docker run --rm $IMAGE_PATH:latest /bin/sh -c "
          echo '🔍 Environment variables in built container:';
          env | grep VITE_ | head -10 || echo '❌ No VITE_ variables found in container';
          echo '🔍 Checking if .env file exists in container:';
          ls -la /app/.env* 2>/dev/null || echo '❌ No .env files found in container';
          echo '🔍 Node.js process.env check:';
          node -e 'console.log(\"VITE_SITE_TITLE:\", process.env.VITE_SITE_TITLE || \"MISSING\")';
        "

        echo "📤 Pushing images..."
        docker push $IMAGE_PATH:${{ github.sha }}
        docker push $IMAGE_PATH:latest

        echo "IMAGE_PATH=$IMAGE_PATH" >> $GITHUB_ENV

    - name: 🏗️ Setup VM Directories
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_SSH_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          mkdir -p ~/projects/greenscape-app
          mkdir -p ~/.gcp
          chown -R $USER:$USER ~/projects/greenscape-app ~/.gcp

    - name: 🔐 Use Manually Created VM Service Account
      run: |
        echo "🔐 Using manually created VM service account for Secret Manager access..."

        VM_SA_EMAIL="vm-secret-manager-access@vernal-seeker-472512-i5.iam.gserviceaccount.com"

        echo "🔍 Service account details:"
        echo "Email: $VM_SA_EMAIL"
        echo "Project: vernal-seeker-472512-i5"

        # Verify service account exists and has correct permissions
        echo "🔍 Verifying service account exists..."
        if gcloud iam service-accounts describe $VM_SA_EMAIL --project=vernal-seeker-472512-i5 >/dev/null 2>&1; then
          echo "✅ VM service account exists: $VM_SA_EMAIL"
        else
          echo "❌ VM service account not found: $VM_SA_EMAIL"
          exit 1
        fi

        # Check permissions
        echo "🔍 Checking Secret Manager permissions..."
        gcloud projects get-iam-policy vernal-seeker-472512-i5 \
          --flatten="bindings[].members" \
          --format="table(bindings.role)" \
          --filter="bindings.members:serviceAccount:$VM_SA_EMAIL AND bindings.role:roles/secretmanager.secretAccessor" || echo "❌ Missing secretmanager.secretAccessor role"

        echo "🔍 Checking Artifact Registry permissions..."
        gcloud projects get-iam-policy vernal-seeker-472512-i5 \
          --flatten="bindings[].members" \
          --format="table(bindings.role)" \
          --filter="bindings.members:serviceAccount:$VM_SA_EMAIL AND bindings.role:roles/artifactregistry.reader" || echo "❌ Missing artifactregistry.reader role"

        # Create service account key file from GitHub secret
        echo "🔑 Creating service account key file from GitHub secret..."
        echo '${{ secrets.VM_SA_KEY }}' > vm-service-account-key.json
        echo "✅ VM service account key file created"
        echo "📊 Key file size: $(wc -c < vm-service-account-key.json) bytes"

    - name: 📤 Upload Files to VM
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_SSH_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        source: "docker-compose.yml,.env.production,vm-service-account-key.json"
        target: ~/projects/greenscape-app/

    - name: 🔐 Setup VM Service Account
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_SSH_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          echo "🔐 Setting up service account key on VM..."
          mv ~/projects/greenscape-app/vm-service-account-key.json ~/.gcp/service-account-key.json
          chmod 600 ~/.gcp/service-account-key.json
          echo "✅ Service account key moved to ~/.gcp/"

    - name: 📦 Create .env file on VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_SSH_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          cd ~/projects/greenscape-app
          echo "📦 Creating .env file on VM..."

          # Debug: Check if service account key exists
          echo "🔍 Checking for service account key..."
          ls -la ~/.gcp/ || echo "❌ ~/.gcp/ directory doesn't exist"

          # Use service account key for authentication
          if [ -f ~/.gcp/service-account-key.json ]; then
            echo "🔐 Found service account key, activating..."
            echo "🔍 Service account key file details:"
            ls -la ~/.gcp/service-account-key.json
            echo "🔍 First 100 characters of key file:"
            head -c 100 ~/.gcp/service-account-key.json
            echo ""

            echo "🔐 Activating service account..."
            gcloud auth activate-service-account --key-file=$HOME/.gcp/service-account-key.json --verbosity=debug 2>&1 || echo "❌ Service account activation failed"

            echo "✅ Service account activation complete"
            echo "🔍 Current authenticated accounts:"
            gcloud auth list --format="table(account,status)"
            echo "🔍 Active account:"
            gcloud auth list --filter=status:ACTIVE --format="value(account)"

            echo "🔍 Project configuration:"
            echo "Project ID: ${{ env.PROJECT_ID }}"
            gcloud config get-value project || echo "No default project set"

            echo "🔐 Testing Secret Manager access with detailed logging..."
            echo "🔍 Attempting: gcloud secrets versions access latest --secret=greenscape --project=${{ env.PROJECT_ID }}"

            if gcloud secrets versions access latest \
              --secret="greenscape" \
              --project="${{ env.PROJECT_ID }}" \
              --verbosity=debug > .env.tmp 2> secret_error.log; then
              echo "✅ Successfully fetched from Secret Manager"
              echo "🔍 Secret Manager response size: $(wc -c < .env.tmp) bytes"
              mv .env.tmp .env
            else
              echo "❌ Failed to access Secret Manager"
              echo "🔍 Error details:"
              cat secret_error.log
              echo "🔍 Service account permissions check:"
              ACTIVE_ACCOUNT=$(gcloud auth list --filter=status:ACTIVE --format='value(account)')
              echo "🔍 Active account: $ACTIVE_ACCOUNT"
              echo "🔍 Checking permissions for: $ACTIVE_ACCOUNT"
              gcloud projects get-iam-policy ${{ env.PROJECT_ID }} --flatten="bindings[].members" --format="table(bindings.role,bindings.members)" --filter="bindings.members:$ACTIVE_ACCOUNT" || echo "Failed to check permissions"

              echo "🔍 Checking if account has secretmanager.secretAccessor role:"
              gcloud projects get-iam-policy ${{ env.PROJECT_ID }} --flatten="bindings[].members" --format="value(bindings.role)" --filter="bindings.members:$ACTIVE_ACCOUNT AND bindings.role:roles/secretmanager.secretAccessor" | head -1 || echo "❌ No secretmanager.secretAccessor role found"
              echo "🔍 Using fallback .env.production file"
              cp .env.production .env
            fi
          else
            echo "❌ Service account key not found, using uploaded .env.production"
            cp .env.production .env
          fi

          echo "🔍 FINAL VM .env FILE VERIFICATION:"
          echo "📊 Size: $(wc -c < .env) bytes"
          echo "📊 Lines: $(wc -l < .env) lines"
          echo "🔍 First 10 variables:"
          head -10 .env
          echo "🔍 VITE_SITE_TITLE check:"
          grep "VITE_SITE_TITLE" .env || echo "❌ VITE_SITE_TITLE missing!"
          echo "🔍 All VITE_ variables (first 10):"
          grep "^VITE_" .env | head -10
          echo "🔍 Total VITE_ variables:"
          grep "^VITE_" .env | wc -l | xargs -I {} echo "Found {} VITE_ variables"
          echo "🔍 .env file permissions:"
          ls -la .env
          echo "🔍 Working directory contents:"
          ls -la

    - name: 🚀 Deploy Application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_SSH_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          cd ~/projects/greenscape-app

          # Authenticate with GCP
          if [ -f ~/.gcp/service-account-key.json ]; then
            gcloud auth activate-service-account --key-file=~/.gcp/service-account-key.json
          fi
          gcloud auth configure-docker ${{ env.DOCKER_REGION }}-docker.pkg.dev --quiet

          # Ensure Docker network exists
          docker network inspect web >/dev/null 2>&1 || docker network create web

          # Update image path in compose file
          sed -i "s|image: .*|image: ${{ env.IMAGE_PATH }}:${{ github.sha }}|g" docker-compose.yml

          # Clean up old containers and images
          echo "🧹 Cleaning up old containers..."
          docker compose down --remove-orphans || true

          echo "🧹 Removing old images..."
          docker images | grep greenscape | awk '{print $3}' | xargs -r docker rmi -f || true

          # Deploy
          echo "🚀 Pulling latest images..."
          docker compose pull --ignore-pull-failures

          echo "🚀 Starting containers..."
          docker compose up -d --force-recreate --remove-orphans

          # Wait for container to start
          echo "⏳ Waiting for container to start..."
          sleep 10

          # Verify container is running
          echo "🔍 Container status:"
          docker ps | grep greenscape-frontend || echo "❌ Container not running"

          # Check container environment variables
          echo "🔍 ENVIRONMENT VARIABLES IN RUNNING CONTAINER:"
          docker exec greenscape-frontend /bin/sh -c "
            echo '🔍 All environment variables:';
            env | head -20;
            echo '🔍 VITE_ variables:';
            env | grep VITE_ | head -10 || echo '❌ No VITE_ variables in container environment';
            echo '🔍 NODE_ENV:';
            echo \$NODE_ENV;
            echo '🔍 Files in /app:';
            ls -la /app/ | head -10;
            echo '🔍 .env files in container:';
            find /app -name '.env*' -type f -exec ls -la {} \; || echo '❌ No .env files found';
          " || echo "❌ Failed to check container environment"

          # Test the application response
          echo "🔍 Testing application response:"
          sleep 5
          curl -s -I http://localhost:3000/ | head -5 || echo "❌ Application not responding"

          # Ensure container is on web network
          docker network connect web greenscape-frontend 2>/dev/null || echo "Container already on web network"

    - name: 🔍 Health Check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_SSH_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        script: |
          sleep 15
          curl -f -m 10 http://localhost:3000/ && echo "✅ Frontend OK" || echo "❌ Frontend FAIL"
          docker logs greenscape-frontend --tail 20